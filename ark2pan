#!/usr/bin/env python2
# encoding: utf-8

import re
from os import makedirs
from errno import EEXIST
from argparse import ArgumentParser
from arkparser import ARKParser

ARCHITECTURE_LOOKUP = {
    '32-bit' : 'i386',
    '64-bit' : 'x86_64',
    'Itanium 64-bit' : 'ia64',
}

SPEED_MULTIPLIER_LOOKUP = {
    'MHz' : 1,
    'GHz' : 1000,
}

CPU_TEMPLATE = '''structure template hardware/cpu/intel/%(family)s_%(number)s;

"manufacturer" = "Intel";
"model" = "%(ident)s";
"speed" = %(speed)s; # MHz
"arch" = "%(arch)s";
"cores" = %(Num_of_Cores)s;
"max_threads" = %(threads)s;
"type" = "%(codename)s"; # Intel codename
"power" = %(power)s; # TDP in watts
'''
#"hyperthreading" = %(hyperthreading)s; # %(Num_of_Threads)s threads

RE_DEBRACKET = re.compile(r'\((?!R).*\).*$')


def main():
    argparser = ArgumentParser(description='Generate Pan hardware templates for Intel CPUs from ARK')
    argparser.add_argument('filename', metavar='FILENAME', help='Path to downloaded ARK XML file')
    argparser.add_argument('--debug', action='store_true', help='Print all parsed CPU data to stdout')
    args = argparser.parse_args()

    arkparser = ARKParser()
    cpus = arkparser.parse(args.filename)

    for cpu in cpus:
        if 'Instruction_Set' in cpu:
            cpu['arch'] = ARCHITECTURE_LOOKUP[cpu['Instruction_Set']]
        else:
            if args.debug:
                print '# "%(Processor_Name)s", attempting to infer architecture from CPU features' % cpu
            if 'Intel(R)_64' in cpu and cpu['Intel(R)_64'] == True:
                cpu['arch'] = ARCHITECTURE_LOOKUP['64-bit']
            elif 'Processor_Name' in cpu and 'Itanium' in cpu['Processor_Name']:
                cpu['arch'] = ARCHITECTURE_LOOKUP['Itanium 64-bit']
            else:
                # Fatal, always report
                print '# Skipped "%(Processor_Name)s", could not determine architecture' % cpu
                continue

        cpu['hyperthreading'] = False

        try:
            cpu['hyperthreading'] = cpu['Intel(R)_HyperThreading_Technology']
        except KeyError as e:
            # Not fatal, report in debug mode only
            if args.debug:
                print ('# Continuing, but "%(Processor_Name)s", missing ' % cpu) + e.args[0]
            pass

        try:
            speed = cpu['Processor_Base_Frequency'].split()
            speed[0] = float(speed[0])
            cpu['speed'] = int(speed[0] * SPEED_MULTIPLIER_LOOKUP[speed[1]])
            cpu['ident'] = RE_DEBRACKET.sub('', cpu['Processor_Name'].replace('Processor', 'CPU'))
            cpu['ident'] += '@ %.2f %s' % tuple(speed)
            cpu['family'] = RE_DEBRACKET.sub('', cpu['ident'].split()[1]).replace('(R)', '').lower()
            modifier = RE_DEBRACKET.sub('', cpu['ident'].split()[2]).replace('(R)', '').lower()
            cpu['number'] = cpu['Processor_Number'].replace(' ','').replace('-','_').lower()
            cpu['codename'] = cpu['Code_Name'].lower()
            cpu['power'] = cpu['TDP'].split()[0]

            if modifier != 'cpu':
                cpu['family'] = '%s_%s' % (cpu['family'], modifier)

            cpu['threads'] = cpu['Num_of_Cores']
            if 'Num_of_Threads' in cpu:
                cpu['threads'] = cpu['Num_of_Threads']

            try:
                makedirs('intel')
            except OSError as e:
                if e.errno == EEXIST:
                    pass
                else:
                    raise

            template_filename = 'intel/%(family)s_%(number)s.pan' % cpu
            with open(template_filename, 'w') as f:
                f.write(CPU_TEMPLATE % cpu)

            if args.debug:
                keys = cpu.keys()
                keys.sort()
                for k in keys:
                    if cpu[k]:
                        print ("%60s : %s") % (k, cpu[k])
                print
        except KeyError as e:
            print ('# Skipped "%(Processor_Name)s", missing ' % cpu) + e.args[0]


if __name__ == '__main__':
    main()
